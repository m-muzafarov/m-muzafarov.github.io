---
layout: post
status: publish
published: true
title: Конспект АБД
author: m-messiah
author_login: m-messiah
author_email: m.muzafarov@gmail.com
author_url: https://github.com/m-messiah
excerpt: "Весь конспект лекций по АБД"
date: 2012-06-26 23:45:30.000000000 +06:00
categories: SQL
tags: []
comments: true
---
# Весь конспект. #

# Отношение #
Отношение &ndash; подмножество декартова произведения. При этом множества называются доменами.

Отношения удобно представлять в виде таблиц. Строки таблицы соответствуют кортежам. Каждая строка представляет какую-либо сущность.

Внутри каждого отношения атрибуты должны быть разными. А внутри объекта могут и повторяться.

Атрибут, идентифицирующий кортеж &ndash; ключ. Внешний ключ &ndash; значение атрибута, по которому удается восстановить связь с родительской таблицей, при условии, что значения в родительской таблице и дочерней &ndash; совпадают.

В реляционной БД отсутствует понятие группового отношения. Ключ просто дублируется для каждой сущности.
## Свойства отношений: ##

+	Отсутствие дублированных записей. Решается наличием ключа.
+	Отсутствие упорядоченности кортежей. (Порядок не влияет на отношение)
+	Отсутствует порядок атрибутов (столбцов) (Т.е. порядок не влияет)
+	Значение атрибута неделимо (атомарно)

Функциональной зависимостью называется выражение вида: &laquo;Если 2 кортежа согласуются по атрибутам , то также согласуются и по еще одному атрибуту.&raquo;

Формально: А<sub>1</sub>,А<sub>2</sub>,А<sub>3</sub>, .. А<sub>n</sub> -> B. (Функционально определяет)

Говорят, что множество атрибутов А<sub>1</sub>,А<sub>2</sub>, .. А<sub>n</sub> - ключ отношения, если

+	Функционально определяет все остальные атрибуты
+	Наименьшее по включению

Суперключ &ndash; множество всех атрибутов, содержащих ключ.

Функциональная зависимость А<sub>1</sub>,А<sub>2</sub>, .. А<sub>n</sub>->B<sub>1</sub>,.. B<sub>n</sub> называется

+	Тривиальной, если B подмножество А
+	Нетривиальной &ndash; если частично пересекаются
+	Полностью нетривиальной, если не пересекаются

Пусть А={A<sub>1</sub>,&hellip;A<sub>n</sub>} &ndash; множество атрибутов, S &ndash; множество функциональных зависимостей.

Замыкание &ndash; множество атрибутов, что всякое отношение, удовлетворяющее S, что A<sub>1</sub>,&hellip;A<sub>n</sub>->B следует из S.

Обозначается {A<sub>1</sub>,&hellip;A<sub>n</sub>}+

Функц. зависимости транзитивны.

{A<sub>1</sub>, A<sub>n</sub> }+ Замыкание &ndash; это множество всех атрибутов  А<sub>1</sub>, &hellip; А<sub>n</sub> суперключ этого отношения
## Аномалии в схеме реляционной базы: ##

+	Избыточность (несколько раз повторяется инфа)
+	Update аномалия &ndash; необходимость обнолять инфу в нескольких кортежах.
+	Delete аномалия &ndash; удаление части может повлиять на другую инфу.

Для устранения аномалий используют правило декомпозиции отношений. (процесс разбиения исходного отношения на два и более).

Существует Нормальная форма Бойса-Кода (BCNF)

Отношение находится в BCNF когда не существует нетривиальной функц.зависимости, такой, что атрибуты &ndash; суперключ.

1.	Отношение в первой нормальной форме, если все атрибуты атомарны.
2.	Во второй, если он в первой, и каждый неключевой атрибут функц. зависит от ключа, но не зависит ни от какого подмножества ключа.
3.	В третьей &ndash; если он во второй, и не ключевой атрибут зависит нетранзитивно от ключа.
4.	В BCNF, если в третьей, отсутствуют зависимости атрибутов первичного ключа от неключевых атрибутов.

# Физическая модель #

+	Физические аспекты хранения таблиц в определенных файлах.
+	Создание индексов, оптимизирующий скорость выполнения данных.
+	Выполнение различных действий над данными при определенных событиях.

## Целостность данных: ##

+	Целостность сущностей (для каждого значения должен быть соответствующий ключ в родительском значении)
+	Целостность ссылок.

Реляционное исчисление: алгебра и логика.

Основные операции: Добавить, Удалить, Изменить.
## Операции обработки отношений: ##

+	Проекция (вертикальное подмножество, без дубликатов)
+	Выборка (горизонтальное подмножество)
+	Пересечение (отношений)
+	Разность
+	Соединение

# История #
1975 &ndash; Основание Microsoft

1977 &ndash; Software Development&hellip; (ныне Oracle)

1986 &ndash; Появление технологии &laquo;клиент-сервер&raquo;

1988 &ndash; Первая версия Microsoft SQL Server

И.т.п
# Архитектура сервера #
Sql Server использует для хранения баз данных набор файлов ОС

+	Первичные файлы .mdf
+	Вторичные файлы .ndf
+	Логи .ldf

При создании БД все её прошлые файлы зануляются.
## Таблицы ##
&ndash; наборы страниц с заголовком (имя, связки, указание на другие страницы таблицы). В конце &ndash; таблица смещений строк. Всё остальное - поля таблицы.
## Windows и SQL ##
Встроенный пользователь sa &ndash; System Administrator.
## Клиенты: ##
SQL Server Management Studio
## Команды: ##

```sql
Create Table table_name
( {
 |column_name AS computed_column_expression
| ::=[CONSTRAINT constraint_name}
| [{PRIMARY KEY &hellip;&hellip;&hellip;&hellip;..
```

## ЯЗЫК SQL: ##
Выбор

```sql
SELECT FROM
WHERE
```

&nbsp;
### Пример: ###

```sql
SELECT * FROM USP WHERE ID=38725
```

LIKE &ndash; символьные поля CHAR NCHAR

>Я не понимаю, куда она торопится. Капец. Какой смысл так рассказывать?



>Гомоморфный образ группы, в честь победы коммунизма, изоморфен фактор группе по ядру гомоморфизма!

### Обновление записей: ###

```sql
UPDATE { имя таблицы} SET {что модифицировать}
{ [FROM набор таблиц источников][WHERE &hellip; .. }
--E.g.
Update authors SET authors.au_fname = &lsquo;Annie&rsquo; WHERE au_fname = &lsquo;Anne&rsquo;
```

### Удаление ###

```sql
DELETE [FROM] &hellip; [WHERE &hellip; ]
```

E.g. DELETE authors &ndash; очищает все строки

```sql
DELETE FROM authors WHERE au_lname =&rsquo;McBadden&rsquo;
```

Удалить всю таблицу &ndash; TRUNCATE

```sql
SELECT * FROM authors ORDER BY au_lname ASC, au_fname ASC
```

(сортировка по имени и фамилии по возрастанию)

```sql
SELECT 1 &lsquo;qq&rsquo; &ndash;
```
 вывод на экран
### Соединения: ###
INNER JOIN - выбор и объединение строк из 2-х таблиц основываясь на условии совпадения значений некоторых полей строк

LEFT JOIN или LEFT OUTER JOIN &ndash; в результате &ndash; все строки левой таблицы, даже если в правой нет строк, содержащих значения, удовлетворяющие условию join`a

RIGHT JOIN, RIGHT OUTER JOIN- то же, только наоборот.

FULL JOIN, FULL OUTER JOIN &ndash; соединит все строки из обеих таблиц

CROSS JOIN &ndash; сочетание всего
### Функции: ###
CAST (expression AS data_type) преобразование

CONVERT ( data_type, expression, [style]) &ndash; преобразование

GETDATE() &ndash; текущая дата

DATEADD(datepart, number, date) &ndash; добавляет дату

DATEDIFF(datepart,startdate,enddate) &ndash; разница в единицах datepart

### Создание временных таблиц: ###

```sql
#nametable
```
&ndash; локальная таблица временная. Исчезает с прекращением сеанса

```sql
##nametable
```
&ndash; глобальная временная таблица.

@ - переменные.

```sql
Declare @sql_stmnt varchar(50)
Set @sql_stmnt = &lsquo;select * from people&rsquo;
Exec(@sql_stmnt)
```

### Условия: ###

```sql
IF логика { } [ELSE { } ]
```

```sql
WHILE bool { } [break] { } [continue]
```

Курсор &ndash; сформированный пользователем табличный объект, откуда можно читать построчно.

DECLARE cursor_name CURSOR

[LOCAL|GLOBAL] [FORWARD_ONLY|SCROLL] [STATIC|DYNAMIC|FAST_FORWARD]

..

FOR select_statement

.

OPEN - открыть курсор

Движение по курсору командой FETCH

DECLARE CURSOR STIPCUR FOR sname, stip&hellip;

EXEC SQL CURSOR STIPCUR
### Представления ###
Представление VIEW &ndash; это именованная виртуальная таблица, содержание которой выбирается из других таблиц с помощью запросов.

При изменении значений в таблицах автоматически меняются значения преставления.

Наличие имени у такой таблицы позволяет пользователю выполнять операции с базовыми таблицами.

Базовые таблицы &ndash; таблицы которые содержат данные и постоянно находятся на устройствах хранения информации. Представления по сравнению с ними являются более гибкими средствами. Когда СУБД отыскивает в команде ссылку на представление.

СУБД имен 2 возможности реализации представления:

+	Если определение представления простое, то система формирует каждую запись по мере необходимости
+	Если представление сложное, СУБД сначала выполняет материализацию выполнения, затем система выполняет пользовательские команды.

CREATE VIEWAS select &hellip; from &hellip; where &hellip;

Нельзя UNION объеденения. Нельзя ORDER BY.

Удаление представлений: DROP VIEW

Не должно использовать группировки, условия. Для вставки - любые поля базовой таблицы.
## Транзакция ##
&ndash; совокупность действий пользователя. Модуль для выполнения.

+	Atomicity &ndash; атомарность. Либо все изменения в транзакции, либо ни одного.
+	Consistency(постоянство) &ndash; после завершения не должна быть нарушена целостность данных.
+	Isolation(изолированность) Изменения изолируются от других транзакций.
+	Durability(устойчивость) изменения в любом случае, даже если был сбой.

### Запуск транзакции: ###

+	Explicit &ndash; явная. BEGIN TRANSACTION.
+	Autocommit &ndash; автоматически после блока команд.
+	Implicit &ndash; неявная. SET IMPLICIT TRANSACTION ON/OFF

### Завершение транзакции: ###
Конструкция COMMIT

Если ошибка &ndash; ROLLBACK возврат к точке отката.

Create functionreturns[as .. ] begin &hellip; return .. end

Create fuction &hellip; returns table begin &hellip; return .. end

Для того, чтобы определить в какой нормальной форме БД &mdash; нужно оценить нормальность форм каждой таблицы, а потом взять наименьшую.

1 нормальная форма &mdash; в каждой ячейке &mdash; неделимое значение.

2 нормальная форма &mdash; нет функциональных зависимостей.

3 нормальная форма &mdash; нет транзитивных зависимостей.

Промежуток &ndash; после Group BY - написать

Having нужное between ### and ###
### Триггер ###
Триггер &ndash; процедуры, хранимые в БД. Вызываются автоматически.

Пример

```sql
Create table my_table( a int NULL, b int NULL)
Go
ALTER TRIGGER my_trig ON my_table
```

Функции пользователя: скалярные и возвращающие таблицу.

```sql
Create function abcd (@trener varchar (50))
Returns table
As
Return (select treners.fam, vidsporta.namesp
from treners inner join vidsporta on treners.vidsp=vidsporta.vidsp
where treners.fam=@trener)
```

### Вызов функции: ###
Select * from abcd(&lsquo;Филин&rsquo;)
### Фантомы ###

+	Проблема &ldquo;грязной записи&rdquo;
+	Проблема &ldquo;грязного чтения&rdquo; - транзакция пытается читать временные данные, с которыми работает другая параллельная транзакция.
+	Проблема повторного чтения &ndash; из-за параллельных потоков повторное чтение может привести к другому результату.
+	Проблема фантомов &mdash; изменение выборки данных другой параллельной транзакцией.

Для реализации разрешения этих проблем необходимо изолировать транзакции друг от друга.

Для уровней изоляции используются блокировки &mdash; LOCKs.
### Уровни: ###

1. No trashing of data. (Запрещение загрязнения данных) Запрет на параллельное изменение данных.
2. No read &mdash; Запрет параллельного чтения данных.
3. No phantom. Ни изменять, ни вставлять новые данные параллельно.

SERIALIZABLE &mdash; никаких проблем, но очень непроизводительно.
### Сущности блокировки: ###

+	БД
+	Таблица
+	Экстент &mdash; страницы
+	Страница
+	Строка
+	Диапазон индекса.

### Простые блокировки: ###

+	Разделяемые блокировки (Shared)
+	Монопольные (Exclusive) (X)
+	Update &mdash; среднее между S и X

### Блокировки намерений: ###
Всегда на таблицу, никогда на строчку. Очень суровы.

+	Разделяемая блокировка намерений IS
+	Монопольная блокировка намерений IX

## Репликация. Дублирование. Восстановление ##
Репликация &ndash; это процесс, который производит обмен между базами данных, находящихся на одном и том же сервере или на других серверах

Репликация использует метафоры:

Publisher &ndash; сервер или группа баз данных, которая отсылает свои данные да другой сервер или в другую базу данных. Содержит публикацию или группы публикаций. Публикация &ndash; совокупность одной или более статей, которые посылаются серверу подписчику или бд. Статья &ndash; основной модуль репликации и это может быть таблица или подмножество таблицы.

Distributor-сервер, который управляет потоком данных через систему репликации. Этот сервер содержит специализированную БД: Distribution database

Subscriber- сервер или БД, которая получает данные от другого сервера иди другой БД
### Виды подписок: ###

+	Push subscription
+	Pull subcription
+	Distribution db &ndash; это системная БД, которая хранится на дистрибуторе и не содержит никаких пользовательских таблиц.

### ТОПОЛОГИЯ РЕПЛИКАЦИИ ###

- Центральный publisher &ndash; один сервер исполняет роли publisher и distributor
- центральный Subscriber &ndash; обычная топология. Несколько серверов или БД копируют свои данные в центральный сервер в одну или несколько БД.
- Центральный publisher с отдаленным distributor

### Репликации: ###

Snapshot - полный снимок базы.

+ Транзакционные &ndash; сохраняет снимок базы как сценарий insert,update,delete&nbsp;(используются когда часто изменяются, или нет смысла поддерживать всё-всё)
+ Merge &ndash; синхронизация баз

### Утилиты: ###

1. Snapshot Agent
2. LOG READER AGENT &ndash; логи.
3. Distribution agent
4. Merge Agent

### GUI ###
Пишется с помощью API на JavaScript, с помощью ASP.

### Виды соединений: ###

+ ODBC &ndash; Open DB Connectivity
+ OLE DB &ndash; буфер обмена например
+ ActiveX Data Objects (ADO)
+ Borland DB Engine (BDE)
+ ADO.NET
